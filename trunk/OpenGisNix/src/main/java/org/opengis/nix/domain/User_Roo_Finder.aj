// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.opengis.nix.domain;

import java.lang.String;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.opengis.nix.domain.User;

privileged aspect User_Roo_Finder {
    
    public static TypedQuery<User> User.findUsersByActivationKeyAndEmailAddress(String activationKey, String emailAddress) {
        if (activationKey == null || activationKey.length() == 0) throw new IllegalArgumentException("The activationKey argument is required");
        if (emailAddress == null || emailAddress.length() == 0) throw new IllegalArgumentException("The emailAddress argument is required");
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE o.activationKey = :activationKey AND o.emailAddress = :emailAddress", User.class);
        q.setParameter("activationKey", activationKey);
        q.setParameter("emailAddress", emailAddress);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByApellidosLike(String apellidos) {
        if (apellidos == null || apellidos.length() == 0) throw new IllegalArgumentException("The apellidos argument is required");
        apellidos = apellidos.replace('*', '%');
        if (apellidos.charAt(0) != '%') {
            apellidos = "%" + apellidos;
        }
        if (apellidos.charAt(apellidos.length() - 1) != '%') {
            apellidos = apellidos + "%";
        }
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE LOWER(o.apellidos) LIKE LOWER(:apellidos)", User.class);
        q.setParameter("apellidos", apellidos);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByDniLike(String dni) {
        if (dni == null || dni.length() == 0) throw new IllegalArgumentException("The dni argument is required");
        dni = dni.replace('*', '%');
        if (dni.charAt(0) != '%') {
            dni = "%" + dni;
        }
        if (dni.charAt(dni.length() - 1) != '%') {
            dni = dni + "%";
        }
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE LOWER(o.dni) LIKE LOWER(:dni)", User.class);
        q.setParameter("dni", dni);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByEmailAddress(String emailAddress) {
        if (emailAddress == null || emailAddress.length() == 0) throw new IllegalArgumentException("The emailAddress argument is required");
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE o.emailAddress = :emailAddress", User.class);
        q.setParameter("emailAddress", emailAddress);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByNombreLike(String nombre) {
        if (nombre == null || nombre.length() == 0) throw new IllegalArgumentException("The nombre argument is required");
        nombre = nombre.replace('*', '%');
        if (nombre.charAt(0) != '%') {
            nombre = "%" + nombre;
        }
        if (nombre.charAt(nombre.length() - 1) != '%') {
            nombre = nombre + "%";
        }
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE LOWER(o.nombre) LIKE LOWER(:nombre)", User.class);
        q.setParameter("nombre", nombre);
        return q;
    }
    
}
