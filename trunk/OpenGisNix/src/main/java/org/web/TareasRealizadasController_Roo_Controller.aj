// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.web;

import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.opengis.nix.Apero;
import org.opengis.nix.Parcela;
import org.opengis.nix.Producto;
import org.opengis.nix.Tarea;
import org.opengis.nix.TareasRealizadas;
import org.opengis.nix.domain.User;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect TareasRealizadasController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String TareasRealizadasController.create(@Valid TareasRealizadas tareasRealizadas, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("tareasRealizadas", tareasRealizadas);
            addDateTimeFormatPatterns(uiModel);
            return "tareasrealizadases/create";
        }
        uiModel.asMap().clear();
        tareasRealizadas.persist();
        return "redirect:/tareasrealizadases/" + encodeUrlPathSegment(tareasRealizadas.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String TareasRealizadasController.createForm(Model uiModel) {
        uiModel.addAttribute("tareasRealizadas", new TareasRealizadas());
        addDateTimeFormatPatterns(uiModel);
        List dependencies = new ArrayList();
        if (Tarea.countTareas() == 0) {
            dependencies.add(new String[]{"tarea", "tareas"});
        }
        if (User.countUsers() == 0) {
            dependencies.add(new String[]{"user", "users"});
        }
        if (Parcela.countParcelas() == 0) {
            dependencies.add(new String[]{"parcela", "parcelas"});
        }
        if (Producto.countProductoes() == 0) {
            dependencies.add(new String[]{"producto", "productoes"});
        }
        if (Apero.countAperoes() == 0) {
            dependencies.add(new String[]{"apero", "aperoes"});
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "tareasrealizadases/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String TareasRealizadasController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("tareasrealizadas", TareasRealizadas.findTareasRealizadas(id));
        uiModel.addAttribute("itemId", id);
        return "tareasrealizadases/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String TareasRealizadasController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("tareasrealizadases", TareasRealizadas.findTareasRealizadasEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) TareasRealizadas.countTareasRealizadases() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("tareasrealizadases", TareasRealizadas.findAllTareasRealizadases());
        }
        addDateTimeFormatPatterns(uiModel);
        return "tareasrealizadases/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String TareasRealizadasController.update(@Valid TareasRealizadas tareasRealizadas, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("tareasRealizadas", tareasRealizadas);
            addDateTimeFormatPatterns(uiModel);
            return "tareasrealizadases/update";
        }
        uiModel.asMap().clear();
        tareasRealizadas.merge();
        return "redirect:/tareasrealizadases/" + encodeUrlPathSegment(tareasRealizadas.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String TareasRealizadasController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("tareasRealizadas", TareasRealizadas.findTareasRealizadas(id));
        addDateTimeFormatPatterns(uiModel);
        return "tareasrealizadases/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String TareasRealizadasController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        TareasRealizadas.findTareasRealizadas(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/tareasrealizadases";
    }
    
    @ModelAttribute("aperoes")
    public Collection<Apero> TareasRealizadasController.populateAperoes() {
        return Apero.findAllAperoes();
    }
    
    @ModelAttribute("parcelas")
    public Collection<Parcela> TareasRealizadasController.populateParcelas() {
        return Parcela.findAllParcelas();
    }
    
    @ModelAttribute("productoes")
    public Collection<Producto> TareasRealizadasController.populateProductoes() {
        return Producto.findAllProductoes();
    }
    
    @ModelAttribute("tareas")
    public Collection<Tarea> TareasRealizadasController.populateTareas() {
        return Tarea.findAllTareas();
    }
    
    @ModelAttribute("tareasrealizadases")
    public Collection<TareasRealizadas> TareasRealizadasController.populateTareasRealizadases() {
        return TareasRealizadas.findAllTareasRealizadases();
    }
    
    @ModelAttribute("users")
    public Collection<User> TareasRealizadasController.populateUsers() {
        return User.findAllUsers();
    }
    
    void TareasRealizadasController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("tareasRealizadas_fechainicio_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("tareasRealizadas_fechafin_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    String TareasRealizadasController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
