// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.opengis.nix;

import java.lang.Boolean;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.opengis.nix.Apero;
import org.opengis.nix.AperoDataOnDemand;
import org.opengis.nix.Parcela;
import org.opengis.nix.ParcelaDataOnDemand;
import org.opengis.nix.Producto;
import org.opengis.nix.ProductoDataOnDemand;
import org.opengis.nix.Tarea;
import org.opengis.nix.TareaDataOnDemand;
import org.opengis.nix.TareasRealizadas;
import org.opengis.nix.domain.User;
import org.opengis.nix.domain.UserDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TareasRealizadasDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TareasRealizadasDataOnDemand: @Component;
    
    private Random TareasRealizadasDataOnDemand.rnd = new SecureRandom();
    
    private List<TareasRealizadas> TareasRealizadasDataOnDemand.data;
    
    @Autowired
    private AperoDataOnDemand TareasRealizadasDataOnDemand.aperoDataOnDemand;
    
    @Autowired
    private ParcelaDataOnDemand TareasRealizadasDataOnDemand.parcelaDataOnDemand;
    
    @Autowired
    private ProductoDataOnDemand TareasRealizadasDataOnDemand.productoDataOnDemand;
    
    @Autowired
    private TareaDataOnDemand TareasRealizadasDataOnDemand.tareaDataOnDemand;
    
    @Autowired
    private UserDataOnDemand TareasRealizadasDataOnDemand.userDataOnDemand;
    
    public TareasRealizadas TareasRealizadasDataOnDemand.getNewTransientTareasRealizadas(int index) {
        TareasRealizadas obj = new TareasRealizadas();
        setApero(obj, index);
        setDosis(obj, index);
        setFechaFin(obj, index);
        setFechaInicio(obj, index);
        setFinalizada(obj, index);
        setParcela(obj, index);
        setProducto(obj, index);
        setTarea(obj, index);
        setUsuario(obj, index);
        return obj;
    }
    
    public void TareasRealizadasDataOnDemand.setApero(TareasRealizadas obj, int index) {
        Apero apero = aperoDataOnDemand.getRandomApero();
        obj.setApero(apero);
    }
    
    public void TareasRealizadasDataOnDemand.setDosis(TareasRealizadas obj, int index) {
        int dosis = index;
        if (dosis > 999) {
            dosis = 999;
        }
        obj.setDosis(dosis);
    }
    
    public void TareasRealizadasDataOnDemand.setFechaFin(TareasRealizadas obj, int index) {
        Calendar fechaFin = Calendar.getInstance();
        obj.setFechaFin(fechaFin);
    }
    
    public void TareasRealizadasDataOnDemand.setFechaInicio(TareasRealizadas obj, int index) {
        Calendar fechaInicio = Calendar.getInstance();
        obj.setFechaInicio(fechaInicio);
    }
    
    public void TareasRealizadasDataOnDemand.setFinalizada(TareasRealizadas obj, int index) {
        Boolean finalizada = Boolean.TRUE;
        obj.setFinalizada(finalizada);
    }
    
    public void TareasRealizadasDataOnDemand.setParcela(TareasRealizadas obj, int index) {
        Parcela parcela = parcelaDataOnDemand.getRandomParcela();
        obj.setParcela(parcela);
    }
    
    public void TareasRealizadasDataOnDemand.setProducto(TareasRealizadas obj, int index) {
        Producto producto = productoDataOnDemand.getRandomProducto();
        obj.setProducto(producto);
    }
    
    public void TareasRealizadasDataOnDemand.setTarea(TareasRealizadas obj, int index) {
        Tarea tarea = tareaDataOnDemand.getRandomTarea();
        obj.setTarea(tarea);
    }
    
    public void TareasRealizadasDataOnDemand.setUsuario(TareasRealizadas obj, int index) {
        User usuario = userDataOnDemand.getRandomUser();
        obj.setUsuario(usuario);
    }
    
    public TareasRealizadas TareasRealizadasDataOnDemand.getSpecificTareasRealizadas(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        TareasRealizadas obj = data.get(index);
        return TareasRealizadas.findTareasRealizadas(obj.getId());
    }
    
    public TareasRealizadas TareasRealizadasDataOnDemand.getRandomTareasRealizadas() {
        init();
        TareasRealizadas obj = data.get(rnd.nextInt(data.size()));
        return TareasRealizadas.findTareasRealizadas(obj.getId());
    }
    
    public boolean TareasRealizadasDataOnDemand.modifyTareasRealizadas(TareasRealizadas obj) {
        return false;
    }
    
    public void TareasRealizadasDataOnDemand.init() {
        data = TareasRealizadas.findTareasRealizadasEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'TareasRealizadas' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.opengis.nix.TareasRealizadas>();
        for (int i = 0; i < 10; i++) {
            TareasRealizadas obj = getNewTransientTareasRealizadas(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
